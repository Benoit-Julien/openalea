.. _sphinx_tutorial:

######################
Sphinx_ quick overview
######################

`Sphinx`_ uses reStructuredText  as its markup language, and many of its strengths
come from the power and straightforwardness of reStructuredText and its parsing
and translating suite, the Docutils. 

Here is a quick reStructuredText tutorial :ref:`rst_tutorial`.

Configuration and compilation
=============================

In order to manage a documentation with `Sphinx`_, you need a configuration file.

To generate a template of configuration file, type **sphinx-quickstart** that 
will create a file called **conf.py** as well as a **Makefile**

Edit this file to your need. 

Then, create some reST files and type **make**

Here below are a few markups and directives specific to Sphinx (not part of reST).

Sphinx markup
=============

How to include source file
^^^^^^^^^^^^^^^^^^^^^^^^^^

Use the *literalinclude* directive:

.. code-block:: rest

    .. literalinclude:: filename
        :linenos:
        :language: python
        :lines: 1, 3-5
        :start-after: 3
        :end-before: 5

How to include reST file using a TOC tree
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Since reST does not have facilities to interconnect several documents, or split
documents into multiple output files, Sphinx uses a custom directive to add 
relations between the single files the documentation is made of, as well as 
tables of contents. The toctree directive is the central element. 

.. code-block:: rest

    .. toctree::
        :maxdepth: 2
        
        intro
        chapter1
        chapter2
    
Globbing can be used by adding the *glob* option:
    
.. code-block:: rest
    
    .. toctree::
       :glob:
       
        intro*
        recipe/*
        *
   
    
How to include Latex formulas
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sphinx adds several extension to restructuredText among which the math 
extension, which allows to add Latex expressions in the text.

This example, put in the text::

     :math:`\alpha > \beta`  

produces ":math:`\alpha > \beta`".


.. warning:: 
    The *math* markup can be used within reST files (to be parsed by Sphinx)
    but within your python's docstring, the slashes need to be escaped !
    ``:math:`\alpha``` should therefore be written ``:math:`\\alpha```       

How to auto-document your python code
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Let us suppose you have 

.. code-block:: rest

    .. module:: actor

    .. autoclass:: IActor
        :members:
        :undoc-members:

Cross-referencing syntax
^^^^^^^^^^^^^^^^^^^^^^^^

Cross-references are generated by many semantic interpreted text roles. 
Basically, you only need to write ``:role:`target```, and a link will be
created to the item named target of the type indicated by role. The 
linksâ€™s text will be the same as target.

You may supply an explicit title and reference target, like in reST direct
hyperlinks: ``:role:`title <target>``` will refer to target, but the link text
will be title.

How to add raw html
^^^^^^^^^^^^^^^^^^^

.. raw:: html

    <html style="border:2px color:red">
    <tr>
    <td>column 1</td>
    <td>column 1</td>
    </tr>
    </html>







.. ---------------------------------------------------

.. _Sphinx: http://sphinx.pocoo.org/index.html
