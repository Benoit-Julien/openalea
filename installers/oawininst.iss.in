; BURP ;


[Setup]
AppName=OpenAlea for Python $PYTHONMAJOR.$PYTHONMINOR
AppVersion=0.9
DefaultDirName=None
DefaultGroupName=OpenAlea
OutputBaseFilename=OpenAleaInstaller-Py$PYTHONMAJOR.$PYTHONMINOR
SetupIconFile=..\..\visualea\share\openalea_icon.ico

Uninstallable=no
Compression=lzma/max

DisableDirPage=yes
DisableProgramGroupPage=yes
DisableReadyPage=yes

[Files]
Source: "python.msi"; DestDir: {tmp}; Flags: dontcopy
Source: "pywin32.exe"; DestDir: {tmp}; Flags: dontcopy
Source: "setuptools.exe"; DestDir: {tmp}; Flags: dontcopy
Source: "pyqt4.exe"; DestDir: {tmp}; Flags: dontcopy
Source: "OpenAlea*.egg"; DestDir: {tmp}; Flags: dontcopy

Source: "setuptools_test.py"; DestDir: {tmp}; Flags: dontcopy
Source: "pywin32_test.py"; DestDir: {tmp}; Flags: dontcopy
Source: "pyqt_test.py"; DestDir: {tmp}; Flags: dontcopy

[Code]
type
  TEggArray = Array [0..$EGGMAXID] of String;

const
  PythonMajorVersion = $PYTHONMAJOR       ;
  PythonMinorVersion = $PYTHONMINOR       ;

var
  Eggs :  TEggArray;
  DetectEnvironmentPage: TOutputMsgWizardPage;
  AbortInstall : Boolean;
  PyInstalled, STInstalled, PYWInstalled, PyQtInstalled: Boolean;

(*** ------------------------- ***)
(*** Various utility functions ***)
(*** ------------------------- ***)
procedure InitEggArray();
begin
$EGGINIT
end;

(* GetTempDir doesn't work and typing ExpandConstant('{tmp}') is boring *)
function MyTempDir(): String;
begin
    Result:=ExpandConstant('{tmp}\');
end;


(* Return the name of the python installer *)
function GetPythonInstaller(): String;
begin
    Result:='python.msi';
end;

(* Return the directory of the python executable *)
function GetPythonDirectory(): String;
begin
  Result:=ExpandConstant(Format('{reg:HKLM\Software\Python\PythonCore\%d.%d\InstallPath,|None}',[PythonMajorVersion,PythonMinorVersion]))
end;

(* Install eggs *)
function InstallEgg(egg:String): Boolean;
var
   ResultCode: Integer;
begin
  Result := Exec(GetPythonDirectory()+'\Scripts\easy_install.exe',
                 '-N ' + egg, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;


(*** ------------------------------------------------------------------------------ ***)
(*** Functions to detect and install the proper Python version required by OpenAlea ***)
(*** ------------------------------------------------------------------------------ ***)
function DetectPython: Boolean;
begin
  Result := RegKeyExists(HKLM, Format('Software\Python\PythonCore\%d.%d\InstallPath', [PythonMajorVersion,PythonMinorVersion])) and
            DirExists(GetPythonDirectory()) and FileExists(GetPythonDirectory()+'\python.exe');
end;

function InstallPython: Boolean;
var
   ResultCode: Integer;
begin
  ExtractTemporaryFile(GetPythonInstaller());
  Result:=Exec('msiexec','/i '+ MyTempDir()+GetPythonInstaller(),
               '', SW_HIDE, ewWaitUntilTerminated, ResultCode)
  if Result then
    if GetPythonDirectory()='None' then
      Result:=False;
end;

(*** -------------------------------------------------------------------------- ***)
(*** Functions to detect and install the proper setuptools required by OpenAlea ***)
(*** -------------------------------------------------------------------------- ***)
function DetectSetupTools(): Boolean;
var
  ResultCode: Integer;
  Result1: Boolean;
begin
  ExtractTemporaryFile('setuptools_test.py');
  Result:=(Exec(GetPythonDirectory()+'python.exe', MyTempDir()+'setuptools_test.py', '',
          SW_HIDE, ewWaitUntilTerminated, ResultCode)) and (ResultCode=0);
end;

function InstallSetupTools(): Boolean;
var
   ResultCode: Integer;
begin
  ExtractTemporaryFile('setuptools.exe');
  Result := Exec(MyTempDir()+'setuptools.exe', '', '',
                 SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

(*** ----------------------------------------------------------------------- ***)
(*** Functions to detect and install the proper pywin32 required by OpenAlea ***)
(*** ----------------------------------------------------------------------- ***)
function DetectPywin32(): Boolean;
var
  ResultCode: Integer;
  Result1: Boolean;
begin
  ExtractTemporaryFile('pywin32_test.py');
  Result:=(Exec(GetPythonDirectory()+'python.exe', MyTempDir()+'pywin32_test.py', '',
          SW_HIDE, ewWaitUntilTerminated, ResultCode)) and (ResultCode=0);
end;

function InstallPywin32(): Boolean;
var
   ResultCode: Integer;
begin
  ExtractTemporaryFile('pywin32.exe');
  Result := Exec(MyTempDir()+'pywin32.exe', '', '',
                 SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

(*** ------------------------------------------------------ ***)
(*** Functions used to detect and install PyQt for OpenAlea ***)
(*** ------------------------------------------------------ ***)
function DetectPyQtRuntime(): Boolean;
var
  ResultCode: Integer;
begin
  ExtractTemporaryFile('pyqt_test.py');
  Result:=(Exec(GetPythonDirectory()+'python.exe', MyTempDir()+'pyqt_test.py', '',
          SW_HIDE, ewWaitUntilTerminated, ResultCode)) and (ResultCode=0);
end;

function InstallPyQtRuntime(): Boolean;
var
   ResultCode: Integer;
begin
  ExtractTemporaryFile('pyqt4.exe');
  Result := Exec( MyTempDir()+'pyqt4.exe', '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) and (ResultCode=0);
end;

(*** ---------------------------------- ***)
(*** Functions used to install OpenAlea ***)
(*** ---------------------------------- ***)
function InstallOpenAlea(): Boolean;
     var i:Integer;
     var s:String;
     var d:Integer;
     var step:Integer;
begin
     d := 100-WizardForm.ProgressGauge.Position
     step := d/high(Eggs)+1
     Result:=False;
     for i:=0 to high(Eggs) do begin
       s := Eggs[i];     
       WizardForm.StatusLabel.Caption:='Installing '+s;
       WizardForm.Update();      
       ExtractTemporaryFile(s);
       Result := InstallEgg( MyTempDir()+s);
       WizardForm.ProgressGauge.Position := WizardForm.ProgressGauge.Position+ (i*step);
     end;
     Result := True;
end;


(*** ------------------------------------------------------- ***)
(*** Function called at the very beggining of the setup proc ***)
(*** ------------------------------------------------------- ***)
procedure Deploy();
var
  res : Boolean;
begin
  res := True
  WizardForm.StatusLabel.Caption:='Preparing installation';
  WizardForm.Update();
  if not PyInstalled then
    begin
        WizardForm.StatusLabel.Caption:='Installing Python, please wait...';
        WizardForm.Update();
        res := InstallPython();
    end;  
  if res and not STInstalled then
    begin
      WizardForm.StatusLabel.Caption:='Installing SetupTools, please wait...';
      WizardForm.Update();    
      WizardForm.ProgressGauge.Position := 25;
      WizardForm.Update();
      res := InstallSetupTools();
    end;
  if res and not PYWInstalled then
    begin
      WizardForm.StatusLabel.Caption:='Installing PyWin32, please wait...';
      WizardForm.Update();     
      WizardForm.ProgressGauge.Position := 30;
      WizardForm.Update();
      res := InstallPywin32();
    end;
  if res and not PyQtInstalled then
    begin
      WizardForm.StatusLabel.Caption:='Installing PyQt4, please wait...';
      WizardForm.Update();    
      WizardForm.ProgressGauge.Position := 50;
      WizardForm.Update();
      res := InstallPyQtRuntime();
    end;
  if res then
    begin
      WizardForm.StatusLabel.Caption:='Installing OpenAlea, please wait...';
      WizardForm.Update();      
      WizardForm.ProgressGauge.Position := 75;
      WizardForm.Update();
      res := InstallOpenAlea();
    end;
   if res then
      WizardForm.ProgressGauge.Position := 100;
      WizardForm.Update();
end;

procedure DetectEnv(Sender: TWizardPage);
var
  DetectInfo : TNewStaticText;
  caption : String;
begin
  PyInstalled   := DetectPython();
  STInstalled   := PyInstalled and DetectSetupTools();
  PYWInstalled  := PyInstalled and DetectPywin32()
  PyQtInstalled := PyInstalled and DetectPyQtRuntime();

  DetectInfo := TNewStaticText.Create(Sender);
  DetectInfo.Parent := Sender.Surface;
  DetectInfo.AutoSize := True;
  DetectInfo.Top := 60;

  if not PyInstalled then
    caption := 'Python is not installed, OpenAlea will install it for you.'
  else
    caption := 'Python is already installed.';

  if not STInstalled then
    caption := caption+#13+'SetupTools is not installed, OpenAlea will install it for you.'
  else
    caption := caption+#13+'SetupTools is already installed.';

  if not PYWInstalled then
    caption := caption+#13+'PyWin32 is not installed, OpenAlea will install it for you.'
  else
    caption := caption+#13+'PyWin32 is already installed.';

  if not PyQtInstalled then
    caption := caption+#13+'PyQt is not installed, OpenAlea will install it for you.'
  else
      caption:= caption+#13+'PyQt4 is already installed.';
  DetectInfo.Caption := caption;
end;


procedure CurPageChanged(id:Integer);
begin
  case id of
    wpInstalling:
      Deploy()
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
begin
   case CurStep of
      ssPostInstall:
      begin
        Exec(GetPythonDirectory()+'python.exe', '-c "import sys;sys.path.append(\"'+ GetPythonDirectory()+'Lib\site-packages\'+Eggs[$VISUALEAEGGID]+'\");import visualea_postinstall as vp;vp.install()', '',
              SW_HIDE, ewWaitUntilTerminated, ResultCode)
      end
   end;
end;

procedure InitializeWizard();
begin
    InitEggArray();
    DetectEnvironmentPage := CreateOutputMsgPage(wpWelcome,
                          'Information', 'Openalea Installer will try to detect your environment.',
                          'OpenAlea requires Python and several extensions.'+#13 +
                          'This installer will install the required softs.');
    DetectEnvironmentPage.onActivate := @DetectEnv;
end;


