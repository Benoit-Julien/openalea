import openalea.core

from openalea.deploy.shared_data import shared_data
from openalea.core.path import path as Path


def icon_path(filepath, default=None, paths=None, packages=None):
    if filepath is None or isinstance(filepath, basestring) and filepath.startswith(':/'):
        return None
    # Search filename in all paths given by user
    _paths = [Path(filepath)] + [Path(p) / filepath for p in paths]

    # Search icons generated by oalab
    _paths += [Path(p) / '._icon.png' for p in paths]

    # If a path is found, try to find absolute path
    # Try to get icon path from object
    for path in _paths:
        if path.isfile():
            return path

    # Search in shared icons provided by packages given by user
    for package in packages:
        for path in (filepath, 'icons/%s' % filepath):
            path = shared_data(package, path)
            if path and path.isfile():
                return path


def obj_icon_path(obj_lst, default=None, paths=None, packages=None):
    if packages is None:
        packages = [openalea.core]

    if not isinstance(obj_lst, (list, tuple)):
        obj_lst = [obj_lst]

    if paths is None:
        paths = []

    # Try to get icon path from object
    _icon_path = None
    for obj in obj_lst:
        if hasattr(obj, 'icon'):
            _icon_path = obj.icon
            break

    if _icon_path:
        return icon_path(_icon_path, default, paths, packages)


def html_section(identifier, title, items):
    html = ''
    html += '<div class="section" id="%s">\n' % identifier
    html += '<div class="section-title">%s</div>' % title
    html += '  <ul>\n'
    for item in items:
        html += '    <li>%s</li>\n' % (item)
    html += '  </ul>\n'
    html += "</div>"
    return html


def pretty_print(obj):
    """
    :param obj: to decode. Can be a string/unicode or a list of string/unicod
    :return: object decoded into utf-8.
    """
    if isinstance(obj, list):
        text = ', '.join(obj).decode('utf-8')
    else:
        text = str(obj).decode('utf-8')
    return text


def html_item_summary(project):
    excluded_categories = ['cache', 'world']

    html = ''
    # Loop on all categories available in this project
    for category, desc in project.categories.items():
        if category in excluded_categories:
            continue
        title = desc['title']
        items = project.items(category)
        if not items:
            continue

        html_items = []
        for item_name in sorted(items):
            model = items[item_name]
            html_items.append(
                '<span class="item"><span class="item-namebase">%s</span><span class="item-ext">%s</span></span>\n' % (
                    model.filename.namebase, model.filename.ext))
        html += html_section(category, title, html_items)
    return html


def html_metainfo_summary(project):
    items = [
        '<span class="key">Name</span>: <span class="value">%s</span>\n' % (project.name),
        '<span class="key">Path</span>: <span class="value">%s</span>\n' % (project.path)
    ]
    for label, value in project.metadata.items():
        if label in ('icon', 'alias') or not value:
            continue
        value = pretty_print(getattr(project, label))
        items.append(
            '<span class="key">%s</span>: <span class="value">%s</span>\n' %
            (label.capitalize(), value))
    return html_section('meta-information', 'Meta-information', items)


def html_project_summary(project):
    icon = obj_icon_path(project, paths=[project.path])
    if icon_path:
        image = '<img style="vertical-align:middle;" src="file://%s" width="128" />' % icon
    else:
        image = ''
    args = dict(image=image, title=project.title, name=project.name)
    html = '<div class="summary">%(image)s<p class="title">%(title)s</p>' % args
    html += '\n<hr>'
    html += html_metainfo_summary(project)
    html += html_item_summary(project)
    html += '</div>'
    return html
